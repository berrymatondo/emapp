// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum UserRoles {
 CLIENT
 ADMIN
}

enum UserStatuses {
 INACTIF
 ACTIF
}

enum OrderStatuses {
 ORDERED
 READY
 CANCELLED
 DONE
}




model Event {
  id Int @id @default(autoincrement())
  eventName String @unique
  eventDate String
  guestNumber Int?
  stocks Stock[]
  tables Table[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")

}

model Stock {
  id Int @id @default(autoincrement())
  productName String
  initialQte Int @default(0)
  currentQte Int @default(0)
  eventId Int?
  event Event? @relation(fields: [eventId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stocks")
}


model Table {
  id Int @id @default(autoincrement())
  tableName String
  maxGuests Int @default(0)
  curGuests Int @default(0)
  eventId Int?
  event Event? @relation(fields: [eventId], references: [id])
  waiterId Int?
  waiter Waiter? @relation(fields: [waiterId], references: [id])

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tables")
}

model Waiter {
  id Int @id @default(autoincrement())
  name String @unique
  tables Table[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiters")

}

model Order {
  id Int @id @default(autoincrement())
  articles Article[]
  tableId Int?
  table Table? @relation(fields: [tableId], references: [id])
  statut OrderStatuses

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")

}


model Article {
  id Int @id @default(autoincrement())
  articleName String
  qty Int @default(0)
  orderId Int?
  order Order? @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles")
}

